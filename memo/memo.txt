Command
view에서 사용자한테 입력받은 이벤트, 동작 등을 viewModel에 알려주고 viewModel은 거기에 따라서 적절한 로직을 수행해야 한다.
사용자가 발생시킨 동작과 viewModel에 정의된 함수 그 두개를 연결시켜주는게 Command라고 생각하면 된다.


[blahblah]로 붙여주는걸 attribute를 붙인다라고 표현.

Dependency Injection
클래스가 많아지면 결합도가 높아지게된다.(A는 B를 참조하고, B는 C와 D를 참조하고 있는 상태에서, D클래스의 내용을 바꾼다? 그러면 그 수정사항이 너무 많아진다.)
그래서 의존성을 주입해주는게 DI이다. DI를 통해서 클래스간의 결합도를 낮출 수 있다.
-> 강의를 진행하면서 다시 정리해보자.
생성자 주입 : 클래스를 생성할 때 의존성을 주입

viewModel에서 DateTimeService 라는 클래스에서 제공하는 함수들을 가져와서 사용하고 싶다. ->
Interfaces 폴더 생성하고, IDateTime 인터페이스 생성
Services 폴더안에 DateTimeService 클래스 생생하고 IDateTime 상속받아 인터페이스를 구현한다.
ViewModel/Pages의 DashboardViewModel에서 생성자를 만들고, 생성자를 통해서 IDateTime을 주입받는다.
App.xmal의 코드 비하인드에 우리가 만든 인터페이스와 서비스 클래스를 add 해줘야한다.
IDateTime를 internal로 선언하니까 에러가 생기네..?


Scaffold-DbContext "Host=localhost;Port=5433;Database=WpfProjectDatabase;Username=postgres;Password=root"
패키지 관리자 콘솔에서 위 명령어 실행하면 Models 폴더에 DbContext와 Entity 클래스가 생성된다.(GangnamguPopulation.cs(DB 테이블의 컬럼을 객체화 시켰다) 파일과 WpfProjectDatabaseContext.cs 파일 생성)
PostgreSQL에 이미 존재하는 DB 스키마를 기반으로 C# 모델 클래스와 DbContext를 자동 생성하는 데 사용됩니다.




App.xaml.cs에 services.AddSingleton<IDatabase<GangnamguPopulation>, GangnamguPopulationService>(); 등록 안해주면 에러 생긴다.
DashboardViewModel을 생성하려고 했는데,
public class DashboardViewModel
{
    public DashboardViewModel(IDatabase<GangnamguPopulation> database) { ... }
}
그 생성자에 필요한 IDatabase<GangnamguPopulation> 타입을 DI 컨테이너에서 찾지 못해서 에러가 발생한 것입니다.
DashboardViewModel의 생성자에서 IDatabase<GangnamguPopulation>을 요구하고 있습니다.
WPF에서 DashboardViewModel이 NavigationService 또는 DI 컨테이너에 의해 생성될 때,
그에 필요한 인터페이스 구현체를 자동으로 주입해주어야 합니다.
그런데 등록이 안 되어 있으면, 이 에러가 발생합니다


------------------------------------------
xmlns -> XML Namespace의 약자로, XML 문서에서 사용하는 네임스페이스를 정의하는 데 사용됩니다.
cs파일에서도 namespace정의하고, using namespace 하면 public으로 된 것들을 사용할 수 있는 것과 유사하다.
xmlns:x="주소1" -> 주소1에 정의된 네임스페이스를 x라는 이름으로 사용하겠다.










<Page
    x:Class="WPFBasic.Views.Pages.DataPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:local="clr-namespace:WPFBasic.Views.Pages"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:models="clr-namespace:WPFBasic.Models"
    xmlns:ui="http://schemas.lepo.co/wpfui/2022/xaml"
    Title="DataPage"
    d:DataContext="{d:DesignInstance local:DataPage,
                                     IsDesignTimeCreatable=False}"
    d:DesignHeight="750"
    d:DesignWidth="850"
    ui:Design.Background="{DynamicResource ApplicationBackgroundBrush}"
    ui:Design.Foreground="{DynamicResource TextFillColorPrimaryBrush}"
    Foreground="{DynamicResource TextFillColorPrimaryBrush}"
    ScrollViewer.CanContentScroll="False"
    mc:Ignorable="d">

    <Grid>
        <Grid.ColumnDefinitions>
            <!-- ColumnDefinitions 그리드 안의 컬럼들을 정의 -->
            <ColumnDefinition Width="300" />
            <!-- *은 설정하고 남은 컬럼들은 균등하게 나눠주겠다 라는 뜻 -->
            <ColumnDefinition Width="*" />
        </Grid.ColumnDefinitions>

        <Grid Grid.Column="0">
            <!-- Gird.Column 을 하면 특정 컬럼에 대한 그리드다 라고 지정을 할 수 있다.-->
            <!--0 번째 컬럼에 대한 작업은 여기서 하면된다. 행을 나누거나 등등-->
            <Grid.RowDefinitions>
                <RowDefinition Height="auto" />
                <RowDefinition Height="auto" />
                <RowDefinition Height="auto" />
                <RowDefinition Height="auto" />
                <RowDefinition Height="auto" />
                <RowDefinition Height="auto" />
            </Grid.RowDefinitions>

            <!--x:Name 은 컨트롤에 대한 이름 지정 -->
            <!--<ui:TextBlock Grid.Row="0" x:Name="tbkAdminAgency" Text="Administrative Agency *" Margin="0,0,0,0"/>-->
            <!--위 줄에서 Text를 여러 속성으로 나눠서 표시하고 싶을 때 Run 이라는 태그를 사용한다.-->
            <ui:TextBlock Grid.Row="0" x:Name="tbkAdminAgency"  Margin="0,0,0,10">
                <Run Text="Administrative Agency " />
                <Run Text="*" Foreground="OrangeRed" />
            </ui:TextBlock>

            <!--콤보박스에는 viewModel서 특정 리스트에 해당하는 값들을 가져와서 바인딩 해줘야한다.-->
            <ComboBox Grid.Row="1" x:Name="cbxAdminAgency"  ItemsSource="{Binding ViewModel.Colors}" Margin="0,0,0,10"/>

            <ui:TextBlock Grid.Row="2" x:Name="tbkTotalPopulation"  Margin="0,0,0,10">
                <Run Text="Total Population " />
                <Run Text="*" Foreground="OrangeRed" />
            </ui:TextBlock>
            <ui:TextBox Grid.Row="3" x:Name="tbxTotPopulation" Margin="0,0,0,10"/>

        </Grid>
        
        
        <Grid Grid.Column="1">
            
        </Grid>
    </Grid>
</Page>
