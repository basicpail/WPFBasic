<Page
    x:Class="WPFBasic.Views.Pages.DataPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:local="clr-namespace:WPFBasic.Views.Pages"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:models="clr-namespace:WPFBasic.Models"
    xmlns:ui="http://schemas.lepo.co/wpfui/2022/xaml"
    xmlns:controls ="clr-namespace:WPFBasic.Controls"
    Title="DataPage"
    d:DataContext="{d:DesignInstance local:DataPage,
                                     IsDesignTimeCreatable=False}"
    d:DesignHeight="750"
    d:DesignWidth="850"
    ui:Design.Background="{DynamicResource ApplicationBackgroundBrush}"
    ui:Design.Foreground="{DynamicResource TextFillColorPrimaryBrush}"
    Foreground="{DynamicResource TextFillColorPrimaryBrush}"
    ScrollViewer.CanContentScroll="False"
    mc:Ignorable="d">

    <Grid>
        <Grid.ColumnDefinitions>
            
            <!--ColumnDefinitions 그리드 안의 컬럼들을 정의-->
            <ColumnDefinition Width="300" />
            <!-- *은 설정하고 남은 컬럼들은 균등하게 나눠주겠다 라는 뜻 -->
            <ColumnDefinition Width="*" />
        </Grid.ColumnDefinitions>

        <controls:LoadingControl Grid.Column="0" HorizontalAlignment="Center" x:Name="searchGridLoadingControl" Visibility="Visible"/>

        <Grid x:Name="searchGrid" Visibility="Collapsed" Grid.Column="0">
            <!-- Gird.Column 을 하면 특정 컬럼에 대한 그리드다 라고 지정을 할 수 있다.-->
            <!--0 번째 컬럼에 대한 작업은 여기서 하면된다. 행을 나누거나 등등-->
            <!-- Grid.Row="0" Grid.Column="0" 처럼 매 행, 열 마다 인덱스를 매기기 힘든 상황에서는 StackPanel 사용을 고려해라-->
            <Grid.RowDefinitions>
                <RowDefinition Height="auto" />
                <RowDefinition Height="auto" />
                <RowDefinition Height="auto" />
                <RowDefinition Height="auto" />
                <RowDefinition Height="auto" />
                <RowDefinition Height="auto" />
                <RowDefinition Height="auto" />
                <RowDefinition Height="auto" />
                <RowDefinition Height="auto" />
                <RowDefinition Height="auto" />
                <RowDefinition Height="auto" />
                <RowDefinition Height="auto" />
                <RowDefinition Height="auto" />
                <RowDefinition Height="auto" />
                <RowDefinition Height="auto" />
                <RowDefinition Height="auto" />
                <RowDefinition Height="auto" />
                <RowDefinition Height="auto" />
                <RowDefinition Height="auto" />
                <RowDefinition Height="auto" />
            </Grid.RowDefinitions>


            <ui:TextBlock Grid.Row="0" x:Name="tbkId"  Margin="0,0,0,10">
                <Run Text="Id " />
                <Run Text="*" Foreground="OrangeRed" />
            </ui:TextBlock>
            <ui:NumberBox Grid.Row="1" x:Name="cbxId" Text="{Binding ViewModel.SelectedId, Mode=TwoWay}"  Margin="0,0,0,10"/>
            <!--x:Name 은 컨트롤에 대한 이름 지정 -->
            <!--<ui:TextBlock Grid.Row="0" x:Name="tbkAdminAgency" Text="Administrative Agency *" Margin="0,0,0,0"/>-->
            <!--위 줄에서 Text를 여러 속성으로 나눠서 표시하고 싶을 때 Run 이라는 태그를 사용한다.-->
            <ui:TextBlock Grid.Row="2" x:Name="tbkAdminAgency"  Margin="0,0,0,10">
                <Run Text="Administrative Agency " />
                <Run Text="*" Foreground="OrangeRed" />
            </ui:TextBlock>

            <!--콤보박스에는 viewModel서 특정 리스트에 해당하는 값들을 가져와서 바인딩 해줘야한다.-->
            <!--콤보박스에서 선택한 값을 viewModel에서 알아야하니까 TwoWay로 선택한다.-->
            <!--코드비하인드에서 처리하는 로직은 UI에 해당하는 것만 한다 그래서 SelectChanged 같은 이벤트 함수는 사용하지 않기로 한다.-->
            <ComboBox Grid.Row="3" x:Name="cbxAdminAgency" IsEditable="True" Text="{Binding ViewModel.SelectedAdministrativeAgency}"  SelectedItem="{Binding ViewModel.SelectedAdministrativeAgency, Mode=TwoWay}"  ItemsSource="{Binding ViewModel.AdministrativeAgency, Mode=TwoWay}" Margin="0,0,0,10"/>

            <ui:TextBlock Grid.Row="4" x:Name="tbkTotalPopulation"  Margin="0,0,0,10">
                <Run Text="Total Population " />
                <Run Text="*" Foreground="OrangeRed" />
            </ui:TextBlock>
            <ui:NumberBox Grid.Row="5" x:Name="tbxTotalPopulation" Text="{Binding ViewModel.SelectedTotalPopulation , Mode=TwoWay}" Margin="0,0,0,10"/>

            <ui:TextBlock Grid.Row="6" x:Name="tbkMalePopulation"  Margin="0,0,0,10">
                <Run Text="Male Population " />
                <Run Text="*" Foreground="OrangeRed" />
            </ui:TextBlock>
            <ui:NumberBox Grid.Row="7" x:Name="tbxMalePopulation" Text="{Binding ViewModel.SelectedMalePopulation, Mode=TwoWay}" Margin="0,0,0,10"/>

            <ui:TextBlock Grid.Row="8" x:Name="tbkFemalePopulation"  Margin="0,0,0,10">
                <Run Text="Female Population " />
                <Run Text="*" Foreground="OrangeRed" />
            </ui:TextBlock>
            <ui:NumberBox Grid.Row="9" x:Name="tbxFemalePopulation" Text="{Binding ViewModel.SelectedFemalePopulation, Mode=TwoWay}" Margin="0,0,0,10"/>

            <ui:TextBlock Grid.Row="10" x:Name="tbkSexRatio"  Margin="0,0,0,10">
                <Run Text="Sex Ratio " />
                <Run Text="*" Foreground="OrangeRed" />
            </ui:TextBlock>
            <ui:NumberBox Grid.Row="11" x:Name="tbxSexRatio"  Text="{Binding ViewModel.SelectedSexRatio, Mode=TwoWay}" Margin="0,0,0,10"/>

            <ui:TextBlock Grid.Row="12" x:Name="tbkNumberOfHouseholds"  Margin="0,0,0,10">
                <Run Text="Number Of Households " />
                <Run Text="*" Foreground="OrangeRed" />
            </ui:TextBlock>
            <ui:NumberBox Grid.Row="13" x:Name="tbxNumberOfHouseholds" Text="{Binding ViewModel.SelectedNumberOfHouseholds, Mode=TwoWay}" Margin="0,0,0,10"/>

            <ui:TextBlock Grid.Row="14" x:Name="tbkNumberOfPeoplePerHouseholds"  Margin="0,0,0,10">
                <Run Text="Number Of People Per Households " />
                <Run Text="*" Foreground="OrangeRed" />
            </ui:TextBlock>
            <ui:NumberBox Grid.Row="15" x:Name="tbxNumberOfPeoplePerHouseholds" Text="{Binding ViewModel.SelectedNumberOfPeoplePerHousehold, Mode=TwoWay}" Margin="0,0,0,10"/>

            <ui:Button Grid.Row="16" Command="{Binding ViewModel.CreateNewDataCommand, Mode=OneWay}" Height="50" Width="300" Content="Create" Foreground="WhiteSmoke" Background="SteelBlue" Margin="0,0,0,10"/>

            <Grid Grid.Row="17">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>

                <ui:Button Grid.Column="0" Height="50" Width="140" Content="Read All" Foreground="WhiteSmoke" Background="DarkBlue"  Margin="0,0,0,10" HorizontalAlignment="Center" Command="{Binding ViewModel.ReadAllDataCommand, Mode=OneWay}"/>
                <ui:Button Grid.Column="1" Height="50" Width="140" Content="Read" Foreground="WhiteSmoke" Background="Chocolate" Margin="0,0,0,10" HorizontalAlignment="center" Command="{Binding ViewModel.ReadDetailDataCommand, Mode=OneWay}"/>
            </Grid>

            <ui:Button Grid.Row="18" Height="50" Width="300" Content="Update" Foreground="WhiteSmoke" Background="Bisque" Margin="0,0,0,10" Command="{Binding ViewModel.UpdateDataCommand, Mode=OneWay}"/>
            <ui:Button Grid.Row="19" Height="50" Width="300" Content="Delete" Foreground="WhiteSmoke" Background="IndianRed" Margin="0,0,0,10" Command="{Binding ViewModel.DeleteDataCommand, Mode=OneWay}"/>

        </Grid>

        <controls:LoadingControl Grid.Column="1" HorizontalAlignment="Center" x:Name="dgGridLoadingControl" Visibility="Visible"/>

        <Grid x:Name="dgGrid" Visibility="Collapsed" Grid.Column="1">
            <DataGrid x:Name="dgGangnamguPopulation" ItemsSource="{Binding ViewModel.GangnamguPopulations, Mode=OneWay}"/>
        </Grid>
    </Grid>
</Page>
